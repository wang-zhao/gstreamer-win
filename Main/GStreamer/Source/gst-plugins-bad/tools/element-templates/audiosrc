/* vim: set filetype=c: */
% ClassName
GstAudioSrc
% TYPE_CLASS_NAME
GST_TYPE_AUDIO_SRC
% pads
srcpad-simple
% pkg-config
gstreamer-audio-0.10
% includes
#include <gst/audio/gstaudiosrc.h>
% prototypes
static gboolean gst_replace_open (GstAudioSrc * src);
static gboolean
gst_replace_prepare (GstAudioSrc * src, GstRingBufferSpec * spec);
static gboolean gst_replace_unprepare (GstAudioSrc * src);
static gboolean gst_replace_close (GstAudioSrc * src);
static guint
gst_replace_read (GstAudioSrc * src, gpointer data, guint length);
static guint gst_replace_delay (GstAudioSrc * src);
static void gst_replace_reset (GstAudioSrc * src);
% declare-class
  GstAudioSrcClass *audio_src_class = GST_AUDIO_SRC_CLASS (klass);
% set-methods
  audio_src_class->open = GST_DEBUG_FUNCPTR (gst_replace_open);
  audio_src_class->prepare = GST_DEBUG_FUNCPTR (gst_replace_prepare);
  audio_src_class->unprepare = GST_DEBUG_FUNCPTR (gst_replace_unprepare);
  audio_src_class->close = GST_DEBUG_FUNCPTR (gst_replace_close);
  audio_src_class->read = GST_DEBUG_FUNCPTR (gst_replace_read);
  audio_src_class->delay = GST_DEBUG_FUNCPTR (gst_replace_delay);
  audio_src_class->reset = GST_DEBUG_FUNCPTR (gst_replace_reset);
% methods

static gboolean
gst_replace_open (GstAudioSrc * src)
{
  return FALSE;
}

static gboolean
gst_replace_prepare (GstAudioSrc * src, GstRingBufferSpec * spec)
{
  return FALSE;
}

static gboolean
gst_replace_unprepare (GstAudioSrc * src)
{
  return FALSE;
}

static gboolean
gst_replace_close (GstAudioSrc * src)
{
  return FALSE;
}

static guint
gst_replace_read (GstAudioSrc * src, gpointer data, guint length)
{
  return 0;
}

static guint
gst_replace_delay (GstAudioSrc * src)
{
  return 0;
}

static void
gst_replace_reset (GstAudioSrc * src)
{
}
% end
